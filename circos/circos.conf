# circos.conf

<<include /Users/Nick_curie/miniconda2/envs/circos/etc/colors_fonts_patterns.conf>>

<<include /Users/Nick_curie/Desktop/circos/ideogram.conf>>
<<include /Users/Nick_curie/Desktop/circos/ticks.conf>>

<image>
<<include /Users/Nick_curie/miniconda2/envs/circos/etc/image.conf>>
</image>

karyotype = /Users/Nick_curie/Desktop/circos/karyotype.txt

chromosomes_units           = 1000000
chromosomes_display_default = yes

## Highlights notch region in green
<highlights>

	# the default value for z-depth and fill_color for all highlights

	z = 0
	# fill_color = blue_a5

	# we'll draw three highlight sets, all using the same data file

	# the first set will be drawin from 0.6x 1x-25pixels of the ideogram
	# radius and will be green (color by default)

	<highlight>
		file       = /Users/Nick_curie/Desktop/circos/notch_region.txt
		r1         = 0.97r
		r0         = 0.68r
		fill_color = blue_a5
	</highlight>
	
	<highlight>
		file       = /Users/Nick_curie/Desktop/circos/notch_ss.txt
		r1         = 0.97r
		r0         = 0.68r
		fill_color = dgrey
	</highlight>

</highlights>



###############	
# CNV scatter # 
###############

<plots>
		# CN gain
		<plot>
    		scale_log_base = 2
	
  			type = scatter
  			file = CNV_up.txt
  			r1   = 0.97r
  			r0   = 0.87r
  			min  = 0
  			max  = 3
  		  glyph = circle
  		  glyph_size = 6
  		  color = green_a5
		  
		  <axes>
		  	<axis>
  				color     = vlgrey
  				thickness = 2
  				spacing   = 0.3333r
  			</axis>
  		</axes>
		
		<backgrounds>
  			<background>
  				color = vvlgrey_a4
			</background>
  		</backgrounds>
		
		<rules>

  			# if the value is > +1, make dark
  	  		<rule>
  	    		importance = 90
  				condition  = var(value) >= 0.6 && var(value) < 2
  				color = dgreen
	    		glyph_size = 7
				
			</rule>
			
			# if the value is > +2, make very dark
			<rule>
  	    		importance = 90
  				condition  = var(value) >= 2
  				color = vvdgreen
	    		glyph_size = 9
			</rule>
		
		</rules>

    </plot>


	# CN loss
    <plot>
		scale_log_base = 2
		type = scatter
  		file = CNV_down.txt
  		r1   = 0.87r
  		r0   = 0.77r
  		min  = -3
  		max  = 0
	  
  		glyph      = circle
  		glyph_size = 6
  		color      = red_a5
		
		<axes>
			<axis>
		    	color     = vlgrey
				thickness = 2
				spacing   = 0.3333r
			</axis>
		</axes>
	
		<backgrounds>
			<background>
				color = vvlgrey_a4
			</background>
		</backgrounds>
	
	
		<rules>
		
			# if the value is < -1, make dark
			<rule>
				importance = 90
				condition  = var(value) <= -0.6 && var(value) > -2
				color = dred
	    		glyph_size = 7
			</rule>
			
			# if the value is < -2, make very dark
			<rule>
				importance = 90
				condition  = var(value) <= -2
				color = vvdred
	    		glyph_size = 9
			</rule>
	
		</rules>
	
	
    </plot>
	
#################	
# CNV-Seq calls # 
#################
  
    <plot>
    
	type    = heatmap
    file    = cnv-seq_calls.txt
	scale_log_base = 2
    
	min = -3
	max = 3
	
    color  = vdred,dred,lyellow,dgreen,vdgreen
	
	stroke_thickness = 0.5
	stroke_color     = black
	
    r1      = 0.77r
    r0      = 0.76r
	
    <backgrounds>
		<background>
	  		color = lgrey_a4
		</background>
    </backgrounds>

    </plot>

#################	
## Freec calls ## 
#################

    <plot>

	type    = heatmap
    file    = freec_calls.txt
	
	min = 0
	max = 4
	
    color  = vdred,dred,lyellow,dgreen,vdgreen
	
	stroke_thickness = 0.5
	stroke_color     = black

    r1      = 0.76r
    r0      = 0.75r

	<backgrounds>
		<background>
	  		color = lgrey_a4
		</background>
	</backgrounds>

    </plot>


# 	<plot>
#
# 	type = scatter
# 	file = CNVs.txt
# 	scale_log_base = 2
#     color  = spectral-5-div-rev
# 	r0   = 0.75r
# 	r1   = 0.75r
# 	# min  = 0
# # 	max  = 3
# 	glyph = square
# 	glyph_size = 8
# 	# color = green
#
# 	<rules>
# 	<rule>
# 	condition  = 1
# 	fill_color = eval( "spectral-5-div-rev" . remap_int(var(value),-3,3,0,4) )
# 	</rule>
# 	</rules>
#    </plot>



###############	
# lumpy calls # 
###############

	<plot>
   		type    	= tile
   	    layers      = 1
   		orientation = in
		margin      = 0.5u
   		layers_overflow=grow
		
		# stroke_thickness = 0
		stroke_thickness = 0.5
		stroke_color     = black

   		file    = lumpy_svs.txt

   		r1      = 0.75r
   		r0      = 0.72r
		

   		<rules>
			
			<rule>
				condition  = var(type) eq "dup" && var(value) <= 3
				color      = lgreen_a5
			</rule>
			
			<rule>
				condition  = var(type) eq "dup" && var(value) >= 4 && var(value) < 10
				color      = green_a3
			</rule>
			
			<rule>
				condition  = var(type) eq "dup" && var(value) >= 10
				color      = dgreen
			</rule>
			
			
			
			<rule>
				condition  = var(type) eq "del" && var(value) <= 3
				color      = lred_a5
			</rule>
			
			<rule>
				condition  = var(type) eq "del" && var(value) >= 4 && var(value) < 10
				color      = red_a3
			</rule>
			
			<rule>
				condition  = var(type) eq "del" && var(value) >= 10
				color      = dred
			</rule>
			
			<rule>
				condition  = var(type) eq "inv" && var(value) <= 3
				color      = lyellow_a5
			</rule>
			
			<rule>
				condition  = var(type) eq "inv" && var(value) >= 4 && var(value) < 10
				color      = yellow_a3
			</rule>
			
			<rule>
				condition  = var(type) eq "inv" && var(value) >= 10
				color      = dyellow
			</rule>
		
			
		</rules>

   	  	<backgrounds>
   	    	<background>
   	  	    	color = vvlblue_a4
			</background>
		</backgrounds>

	</plot>
	

###############	
# Delly calls # 
###############

	<plot>
   		type    	= tile
   	    layers      = 1
   		orientation = in
		margin      = 0.5u
   		layers_overflow=grow
	
		# stroke_thickness = 0
		stroke_thickness = 0.5
		stroke_color     = black

   		file    = delly_svs.txt

   		r1      = 0.71r
   		r0      = 0.68r
	

   		<rules>
		
			<rule>
				condition  = var(type) eq "dup" && var(value) <= 3
				color      = lgreen_a5
			</rule>
		
			<rule>
				condition  = var(type) eq "dup" && var(value) >= 4 && var(value) < 10
				color      = green_a3
			</rule>
		
			<rule>
				condition  = var(type) eq "dup" && var(value) >= 10
				color      = dgreen
			</rule>
		
		
		
			<rule>
				condition  = var(type) eq "del" && var(value) <= 3
				color      = lred_a5
			</rule>
		
			<rule>
				condition  = var(type) eq "del" && var(value) >= 4 && var(value) < 10
				color      = red_a3
			</rule>
		
			<rule>
				condition  = var(type) eq "del" && var(value) >= 10
				color      = dred
			</rule>
		
			<rule>
				condition  = var(type) eq "inv" && var(value) <= 3
				color      = lyellow_a5
			</rule>
		
			<rule>
				condition  = var(type) eq "inv" && var(value) >= 4 && var(value) < 10
				color      = yellow_a3
			</rule>
		
			<rule>
				condition  = var(type) eq "inv" && var(value) >= 10
				color      = dyellow
			</rule>
	
		
		</rules>

   	  	<backgrounds>
   	    	<background>
   	  	    	color = vvlgreen_a4
			</background>
		</backgrounds>

	</plot>


###########################	
## All SVs heatmap calls ## 
###########################

    <plot>

	type    = heatmap
    file    = all_structural_variants.txt

	color         = vvlblue,vlblue,lblue,blue,dblue,vdblue,vvdblue 
	color_mapping = 2
	
	min = 1
# 	max = 20

	stroke_thickness = 0.25
	stroke_color     = grey

    r1      = 0.68r
    r0      = 0.65r

    </plot>
	
	
######################	
## G4 Quads heatmap ## 
######################

    <plot>

	type    = heatmap
    file    = G4s.txt

	color         = vvlgreen,vlgreen,lgreen,green,dgreen,vdgreen,vvdgreen 

	stroke_thickness = 0.25
	stroke_color     = grey

    r1      = 0.65r
    r0      = 0.62r

    </plot>


########################	
# Lumpy translocations # 
########################
	
	# BNDs track
	<plot>
	type    = heatmap
	file    = lumpy_bnds.txt
	stroke_thickness = 5 

	color   = black
	
	min = 3
	max = 50
	
	r1      = 0.62r
	r0      = 0.61r
	
	  <backgrounds>
  	    <background>
  	      color = lpurple_a4
  	    </background>
  	  </backgrounds>

	</plot>
	
########################	
# Delly translocations # 
########################

	# BNDs track
	<plot>
	type    = heatmap
	file    = delly_bnds.txt
	stroke_thickness = 5 

	color   = black
	
	min = 3
	max = 50
	
	r1      = 0.62r
	r0      = 0.61r
	
	  <backgrounds>
	    <background>
	      color = lpurple_a4
	    </background>
	  </backgrounds>
	
	</plot>


</plots>


#########	
# links # 
#########

<links>

###########
## Lumpy ##
###########

  <link>
    file          = lumpy_translocation_links.txt
    radius        = 0.61r
    color         = dblue
	

    # Curves look best when this value is small (e.g. 0.1r or 0r)
	bezier_radius = 0.1r
	thickness     = 2
	
	<rules>
		
 		# <rule>
# 			condition  = var(type) eq "inv" && var(thickness) >= 10
# 				color      = orange_a1
# 		</rule>
# 		 <rule>
# 			condition  = var(type) eq "inv" && var(thickness) >= 4
# 				color      = orange_a3
# 		</rule>
#
# 		<rule>
# 			condition  = var(type) eq "inv"
# 				color      = orange_a5
# 		</rule>


		<rule>
			condition  = var(thickness) >= 10
				color         = blue_a1
		</rule>
		
		<rule>
			condition  = var(thickness) >= 4
				color         = blue_a3
		</rule>
		
	</rules>
	
  </link>
  
  
###########
## Delly ##
###########

  <link>
    file          = delly_translocation_links.txt
    radius        = 0.61r
    color         = dgreen

    # Curves look best when this value is small (e.g. 0.1r or 0r)
	bezier_radius = 0.1r
	thickness     = 2
	# ribbon = yes
	# stroke_color     = black
	# stroke_thickness = 1
	
	<rules>
		
		<rule>
			condition  = var(reads) >= 10
				color         = green_a1
				stroke_thickness = 4
		</rule>
		
		<rule>
			condition  = var(reads) >= 4
				color         = green_a3
				stroke_thickness = 0.5
		</rule>

	
	</rules>
	
  </link>
  
# ###########
# ## novo ##
# ###########
#
#   <link>
#     file          = novoBreak4circos.txt
#     radius        = 0.61r
#     color         = dorange
#
#     # Curves look best when this value is small (e.g. 0.1r or 0r)
# 	bezier_radius = 0.1r
# 	thickness     = 2
# 	# ribbon = yes
# 	# stroke_color     = black
# 	# stroke_thickness = 1
#
# 	<rules>
#
# 	</rules>
#
#   </link>

</links>



<<include /Users/Nick_curie/miniconda2/envs/circos/etc/housekeeping.conf>>

data_out_of_range* = trim

